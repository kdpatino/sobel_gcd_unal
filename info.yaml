---
# Tiny Tapeout project information
project:
  wokwi_id:    0        
  source_files:        
    - tt_um_sobel_gcd_unal.sv
    - async_nreset_synchronizer.sv
    - spi_dev/verilog/spi_dep.sv
    - spi_dev/verilog/adc_spi.sv
    - sobel_enhancement/src/verilog/sobel_control.sv
    - sobel_enhancement/src/verilog/sobel_core.sv
    - GCD/src/verilog/gcd_top.sv
    - GCD/src/verilog/gcd_fsm.sv
    - GCD/src/verilog/gcd_dp.sv
  top_module:  "tt_um_sobel_gcd_unal"      
  tiles: "1x2"    
yaml_version: 4
documentation: 
  author:       "Kevin Dario PatiÃ±o Sosa, Diana Natali Maldonado Ramirez and Linda Julieth Mendez Aroca"      
  title:        "Sobel Filter and Greatest Common Divider"    
  language:     "System Verilog" 
  description:  "GCD and Sobel Filter"

  how_it_works: |
      Sobel: 
      To process an image, a 3x3 kernel is convoluted with a matrix of neighboring pixels 
      with the same dimensions. After obtaining the convolution value, its magnitude 
      is determined, and then a binarization process is applied.
      GCD:
      The GCD is calculated using subtractions and the following theorem: 
      If 'a' is greater than 'b,' then GCD(a, b) = GCD(a - b, b). 
      The circuit performs subtractions until the two numbers are equal, and that 
      equal number becomes the result. This method relies on the fact that GCD(a, a) equals 'a'.
  how_to_test:  |
      Sobel: 
      Besides the clock and reset signals, the input signals include 'prep_allowed_i' 
      and 'input_px_gray_i.' To initiate processing, the 'prep_allowed_i' signal must 
      first be set high. Subsequently, the 9 neighboring pixels surrounding the pixel 
      of interest are sent one by one into the 'input_px_gray_i' input. A two-clock-cycle 
      delay is observed between sending each set of 9 pixels to allow for the convolution 
      process and the subsequent capture of the resulting pixel in the 'output_px_sobel_o' signal. 
      This process is repeated for the entire resolution of the image.
      GCD:
      Please input two numbers for which you wish to calculate the greatest common divisor, 
      storing them in the 'operand_a' and 'operand_b' variables. The program initiates 
      once you set the 'enable' signal to high following a reset. 
      The calculation concludes when the 'gcd_done' variable is set to high.
  inputs:               
    - ui_in Dedicated inputs - connected to the input switches
    - uio_in IOs Bidirectional Input path
    - ena will go high when the design is enabled
    - clk clock
    - rst_n reset_n - low to reset
  outputs:
    - uo_out Dedicated outputs - connected to the 7 segment display
    - uio_out IOs Bidirectional Output path
    - uio_oe IOs Bidirectional Enable path (active high--> 0=input, 1=output) 
# The following fields are optional
  tag:          "Sobel Filter, edge detection filter, GCD, Greatest Common Divider"     
  external_hw:  "7 segment display"      # Describe any external hardware needed
  discord:      "kevindpatino , diana_06297 , .lindamendez"      
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
