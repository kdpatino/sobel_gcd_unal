--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - verilog/tt_um_LindaM123_gcd_top.sv
    - verilog/gcd_dp.sv
    - verilog/gcd_fsm.sv
  top_module:  "tt_um_LindaM123_gcd_top"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 1

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Linda Mendez"      # Your name
  title:        "Greatest Common Divider"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Calculate Greatest common divider of two positive 8 bits numbers"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The GCD is calculated using substractions and the theorem: 
      If a>b the GCD(a,b) = GCD(a-b,b).
      The circuit makes subtractions until the two numbers are equal, 
      then this number will be the result. Because it uses the fact that GCD(a,a) = a 
      There is a state machine with the states INIT, COMPUTE and FINISH.
      The circuit starts in the state INIT in which it reads the inputs, 
      then it do the substractions and when a=b the circuit change to the state FINISH,
      where the answer is stored in the variable gcd_o and the variable gcd_done changes 
      its value to one indicating that the calculation is finished. 
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Enter two numbers for which you want to calculate the greatest common divider 
      in the operand_a and operand_b variables.
      The programm starts when you put the enable on and after a reset. 
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - operand_a_i is a number
    - operand_b_i is a number
    - clk_i
    - nreset_i to clear variables
    - gcd_enable is used to start the programm
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - gcd_o is the result
    - gcd_done_o is 1 when the programm has finished 
# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "LindaMendez"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
